#!/usr/bin/env python3
"""
DEMOSTRACI√ìN FINAL COMPLETA - Sistema Cognitivo
Todo el sistema funcionando de extremo a extremo
"""

import sys
import os
import random
import time

# A√±adir path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def generar_datos_de_prueba():
    """Generar datos de prueba realistas"""
    print("üß† GENERANDO DATOS DE PRUEBA COGNITIVOS")
    print("=" * 50)
    
    from core.cognitive import SessionManager
    
    # Generar 3 pacientes con diferentes perfiles cognitivos
    patients_data = [
        {"id": "PACIENTE_SANO", "degradation": 0.0, "base_accuracy": 0.92},
        {"id": "PACIENTE_LEVE", "degradation": 0.3, "base_accuracy": 0.78},
        {"id": "PACIENTE_MODERADO", "degradation": 0.6, "base_accuracy": 0.65}
    ]
    
    session_files = []
    
    for patient in patients_data:
        print(f"\nüë§ Generando datos para: {patient['id']}")
        
        # Crear sesi√≥n
        session_manager = SessionManager()
        logger = session_manager.start_session("piano_simon", patient['id'])
        
        # Generar 20 eventos con patr√≥n espec√≠fico
        for i in range(20):
            level = min(i // 4 + 1, 5)
            sequence_length = level + 2
            
            # Calcular fatiga y degradaci√≥n
            fatigue_factor = 1.0 - (i / 25)  # Fatiga gradual
            degradation_factor = 1.0 - patient['degradation']
            
            # Probabilidad de √©xito considerando todos los factores
            success_prob = patient['base_accuracy'] * fatigue_factor * degradation_factor
            
            # Generar secuencia
            sequence_shown = [random.randint(0, 7) for _ in range(sequence_length)]
            
            # Respuesta del paciente
            if random.random() < success_prob:
                sequence_input = sequence_shown.copy()
                base_time = 1200 + (level * 200)
                response_time = base_time + random.randint(-200, 400) + (i * 30)  # Tiempo aumenta con fatiga
            else:
                # Error - cambiar uno o m√°s elementos
                sequence_input = sequence_shown.copy()
                if len(sequence_input) > 1:
                    error_count = random.choice([1, 2]) if level > 3 else 1
                    for _ in range(error_count):
                        error_pos = random.randint(0, len(sequence_input)-1)
                        sequence_input[error_pos] = random.randint(0, 7)
                
                base_time = 1800 + (level * 300)
                response_time = base_time + random.randint(0, 1000) + (i * 50)
            
            presentation_time = sequence_length * 750
            
            # Log del evento
            logger.log_piano_event(
                level=level,
                sequence_shown=sequence_shown,
                sequence_input=sequence_input,
                presentation_time=presentation_time,
                response_time=response_time
            )
            
            is_correct = sequence_shown == sequence_input
            print(f"   ‚îî‚îÄ Evento {i+1:2d}: Nivel {level}, {'‚úÖ' if is_correct else '‚ùå'}, {response_time}ms")
        
        # Finalizar sesi√≥n
        session_manager.end_session()
        session_info = session_manager.list_session_files()[0]  # M√°s reciente
        session_files.append(session_manager.get_session_info(session_info))
        
        print(f"‚úÖ {patient['id']}: 20 eventos generados")
    
    return session_files

def analizar_datos_generados(session_files):
    """Analizar los datos generados con m√©tricas"""
    print("\nüìä AN√ÅLISIS COGNITIVO AUTOM√ÅTICO")
    print("=" * 50)
    
    from core.cognitive import MetricsCalculator
    
    for session_info in session_files:
        print(f"\nüßë‚Äç‚öïÔ∏è ANALIZANDO: {session_info['patient_id']}")
        print("-" * 40)
        
        calculator = MetricsCalculator(session_info['filepath'])
        report = calculator.generate_summary_report()
        print(report)

def generar_todas_las_graficas(session_files):
    """Generar todas las gr√°ficas posibles"""
    print("\nüìà GENERACI√ìN DE GR√ÅFICAS COGNITIVAS")
    print("=" * 50)
    
    from core.cognitive import CognitiveVisualAnalyzer
    
    analyzer = CognitiveVisualAnalyzer()
    
    # Dashboard individual para cada paciente
    for session_info in session_files:
        patient_id = session_info['patient_id']
        print(f"\nüé® Generando dashboard para: {patient_id}")
        
        result = analyzer.create_piano_performance_dashboard(session_info['filepath'])
        print(f"   {result}")
        
        # An√°lisis de fatiga individual
        result_fatigue = analyzer.create_fatigue_analysis(session_info['filepath'])
        print(f"   {result_fatigue.split(chr(10))[0]}")  # Solo primera l√≠nea
    
    # Gr√°fica de comparaci√≥n entre todos los pacientes
    print(f"\nüîÑ Generando comparaci√≥n entre {len(session_files)} pacientes...")
    
    file_paths = [info['filepath'] for info in session_files]
    patient_labels = [info['patient_id'] for info in session_files]
    
    result_comparison = analyzer.create_comparison_chart(file_paths, patient_labels)
    print(f"   {result_comparison}")

def mostrar_utilidades_limpieza():
    """Mostrar utilidades de limpieza"""
    print("\nüóëÔ∏è UTILIDADES DE LIMPIEZA DE DATOS")
    print("=" * 50)
    
    from core.cognitive import CognitiveDataCleaner
    
    cleaner = CognitiveDataCleaner()
    
    # Mostrar resumen completo
    summary = cleaner.get_storage_summary()
    print(summary)
    
    # Mostrar men√∫ de limpieza selectiva
    menu = cleaner.selective_delete_menu()
    print("\n" + menu)

def main():
    """Demostraci√≥n completa del sistema"""
    print("üöÄ DEMOSTRACI√ìN FINAL COMPLETA - SISTEMA COGNITIVO")
    print("=" * 60)
    print()
    print("üéØ Objetivos de la demostraci√≥n:")
    print("   ‚Ä¢ Generar datos cognitivos realistas")
    print("   ‚Ä¢ An√°lisis autom√°tico de m√©tricas")
    print("   ‚Ä¢ Gr√°ficas profesionales de rendimiento")
    print("   ‚Ä¢ Comparaciones entre pacientes")
    print("   ‚Ä¢ Utilidades de gesti√≥n de datos")
    print()
    
    try:
        # PASO 1: Generar datos de prueba
        print("üîÑ PASO 1: Generaci√≥n de datos de prueba")
        session_files = generar_datos_de_prueba()
        
        input("\n‚è∏Ô∏è  Presione Enter para continuar al an√°lisis...")
        
        # PASO 2: An√°lisis de m√©tricas
        print("\nüîÑ PASO 2: An√°lisis cognitivo autom√°tico")
        analizar_datos_generados(session_files)
        
        input("\n‚è∏Ô∏è  Presione Enter para continuar a las gr√°ficas...")
        
        # PASO 3: Generar gr√°ficas
        print("\nüîÑ PASO 3: Generaci√≥n de gr√°ficas")
        generar_todas_las_graficas(session_files)
        
        input("\n‚è∏Ô∏è  Presione Enter para ver utilidades de limpieza...")
        
        # PASO 4: Mostrar utilidades
        print("\nüîÑ PASO 4: Utilidades de gesti√≥n")
        mostrar_utilidades_limpieza()
        
        # RESUMEN FINAL
        print("\n" + "=" * 60)
        print("üéâ DEMOSTRACI√ìN COMPLETADA EXITOSAMENTE")
        print("=" * 60)
        print()
        print("‚úÖ FUNCIONALIDADES DEMOSTRADAS:")
        print("   ‚Ä¢ Logging cognitivo autom√°tico con CSV")
        print("   ‚Ä¢ An√°lisis de m√©tricas neurodegenerativas")
        print("   ‚Ä¢ Dashboard visual con 4 gr√°ficas simult√°neas")
        print("   ‚Ä¢ An√°lisis espec√≠fico de fatiga cognitiva")
        print("   ‚Ä¢ Comparaci√≥n entre m√∫ltiples pacientes")
        print("   ‚Ä¢ Gesti√≥n y limpieza de archivos de datos")
        print()
        print("üìÅ ARCHIVOS GENERADOS:")
        print("   ‚Ä¢ Datos CSV: data/cognitive/*.csv")
        print("   ‚Ä¢ Dashboards: data/cognitive/dashboard_*.png")
        print("   ‚Ä¢ An√°lisis fatiga: data/cognitive/fatiga_analysis_*.png")
        print("   ‚Ä¢ Comparaciones: data/cognitive/comparison_*.png")
        print()
        print("üß† APLICACI√ìN M√âDICA:")
        print("   ‚Ä¢ Sistema listo para evaluaci√≥n neurodegenerativa")
        print("   ‚Ä¢ M√©tricas objetivas para diagn√≥stico")
        print("   ‚Ä¢ Seguimiento de progresi√≥n de pacientes")
        print("   ‚Ä¢ Reportes visuales para equipos m√©dicos")
        print()
        print("üöÄ El sistema est√° completamente funcional!")
        
    except Exception as e:
        print(f"\n‚ùå Error en la demostraci√≥n: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 